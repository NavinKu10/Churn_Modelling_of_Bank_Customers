# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AUi6rjvG0_0RDdHAMxaCMyWfTZcnUozb
"""

!pip install -U -q kaggle
!mkdir -p ~/.kaggle
from google.colab import files
files.upload()

!cp kaggle.json ~/.kaggle/

!kaggle datasets download -d hj5992/bank-churn-modelling

!chmod 600 /root/.kaggle/kaggle.json

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from zipfile import ZipFile
zip_file = ZipFile('/content/bank-churn-modelling.zip')

df=pd.read_csv(zip_file.open('Churn_Modelling.csv'))

df.head(5)

df.dtypes

df = df.drop(columns = ["RowNumber", "CustomerId", "Surname"])

df.head(5)

#feature scaling
!pip install category_encoders
import category_encoders as ce
encoder  = ce.BinaryEncoder(cols = ['Geography', 'Gender'])
df_binary = encoder.fit_transform(df)

df_binary.head(5)

y = df_binary.iloc[:, 13].values
x = df_binary.iloc[:, 0:13].values

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x = sc.fit_transform(x)

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.025, random_state = 0)
x_train, x_dev, y_train, y_dev = train_test_split(x_train, y_train, test_size = 0.025, random_state = 0)

import tensorflow as tf
import tensorflow.keras 

from keras.models import Sequential
from keras.layers import Dense

#k-fold on dev set
from sklearn.model_selection import StratifiedKFold
kfold = StratifiedKFold(n_splits=10, shuffle=True, random_state=1)
acc = []
for train, test in kfold.split(x_dev, y_dev):
  cf = Sequential()
  cf.add(Dense(output_dim = 8, init = 'uniform', activation = 'relu', input_dim = 13))
  cf.add(Dense(output_dim = 4, init = 'uniform', activation = 'relu'))
  cf.add(Dense(output_dim = 8, init = 'uniform', activation = 'relu'))
  cf.add(Dense(output_dim = 1, init = 'uniform', activation = 'sigmoid'))
  cf.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])
  cf.fit(x_dev[train], y_dev[train], batch_size = 10, nb_epoch = 25)
  scores = cf.evaluate(x_dev[test], y_dev[test], verbose=0)
  acc.append(scores[1] * 100)

#making the ann to train the model
  cf = Sequential()
  cf.add(Dense(output_dim = 16, init = 'uniform', activation = 'relu', input_dim = 13))
  cf.add(Dense(output_dim = 8, init = 'uniform', activation = 'relu', input_dim = 16))
  cf.add(Dense(output_dim = 1, init = 'uniform', activation = 'sigmoid'))
  cf.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])
  cf.fit(x_train, y_train, batch_size = 10, nb_epoch = 25)

np.mean(acc)
np.std(acc)

#predicting the model
y_pred = cf.predict(x_test)
y_pred = (y_pred > 0.5)

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
cm

(185+33)/(185+33+33)
86.8525896
